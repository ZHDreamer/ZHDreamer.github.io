<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>01 Intro</title>
    <url>/2021/07/07/01-Intro/</url>
    <content><![CDATA[<h2 id="学习cs-61a个人体会">学习CS-61A个人体会</h2>
<p>现在我刚好学到11节，期中考试之前的最后一节，算是学过一半了。</p>
<p>当初想要学CS-61A是我一个朋友和我介绍的，放假后没什么事干，本这实在不行学个英语也行的态度开始了61A的学习。</p>
<span id="more"></span>
<h3 id="和国内课程的区别">和国内课程的区别</h3>
<p>我就读于西安电子科技大学，目前大一上了2个有关程序的课，大一上的计算机导论与程序设计（C语言），下的Python程序设计，还有一个程序设计（C语言做几个题写报告）。</p>
<p>整个大一上下来给我的感觉就是老师讲的东西没有什么用，基本就是照着教材说一遍。教材的编排更偏向于让你学会如何运用一个语音去编写程序，对于算法的教学大多是上机时做题自己参悟出来的。我不知道是不是国内的大学都是这样，反正就我的学习体验来说，这些课程对与提高我对于编程理解的作用是很有限的。</p>
<p>CS-61A不同的是，它一开始就会教你程序是如何运行的，让你学会如何解释程序的运行，也会教你一些非常神奇的操作，比如各种high-order function。61a的作业量其实是比较大的，但是很多作业都很有趣，比如project系列会让你去完成一个可执行的游戏或者程序，他给你了一个大的框架，你只需要填一些东西，就可以感受到自己写的东西运行起来的快乐。有些题也很烧脑，比如hw03的Extra Questions让你写Church numerals，是一个利用函数定义自然数的程序，最后的程序不过几行，但是可能要花数小时思考。</p>
<h3 id="资料丰富">资料丰富</h3>
<p>61A的课程资料是对外公开的，所以即便不是伯克利的学生也可以运用课程资料自学，作业也可以用自带的python ok来检测，只需加上<code>--local</code>就可以不用填写邮箱，GitHub上也有人上传了作业代码，包括我也上传了我的版本，所以上课和写作业的过程是非常顺畅的。</p>
<p>未完待续</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>03 Control</title>
    <url>/2021/07/08/03-Control/</url>
    <content><![CDATA[<h2 id="print-and-none">Print and None</h2>
<ul>
<li><strong>None</strong> represents nothing in python</li>
<li>A function that does not explicitly return a value will return None</li>
<li>None is a value that will not displayed by the interpreter</li>
</ul>
<h3 id="pure-functions-non-pure-functions">Pure Functions &amp; Non-Pure Functions</h3>
<h4 id="pure-functions">Pure Functions</h4>
<p>just return values</p>
<h4 id="non-pure-functions">Non-Pure Functions</h4>
<p>have side effects</p>
<p>like <code>print()</code> has no return value</p>
<h3 id="nested-expressions-with-print">Nested Expressions with Print</h3>
<p><code>print(print(1),print(2))</code> will display:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">None None</span><br></pre></td></tr></table></figure>
<p>Because <code>print()</code> has no return value, and <code>print(None)</code> will display a None, so 1,2 will display first following by two None.</p>
<p><strong>Unassigned variable's</strong> value is also None.</p>
<span id="more"></span>
<h2 id="control">Control</h2>
<ul>
<li><strong>Expressions</strong> in programs evaluate to values</li>
<li><strong>Statements</strong> are executed to perform actions</li>
</ul>
<p>In some case we don't want to executed all the code, we just want some of them or make deferent out put from input. To do this we introduce the concept of <strong>control</strong>.</p>
<h3 id="conditional-statements">Conditional Statements</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> &lt;conditional expression&gt;:</span><br><span class="line">    &lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">elif</span> &lt;conditional expression&gt;:</span><br><span class="line">    &lt;suite of statements&gt;</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    &lt;suite of statements&gt;</span><br></pre></td></tr></table></figure>
<h4 id="boolean-contexts">Boolean Contexts</h4>
<p><strong>Boolean context</strong> is any place where an expression is evaluated to check if it's a True or a False value.</p>
<h4 id="boolean-expressions">Boolean Expressions</h4>
<p><strong>Boolean Expressions</strong> contain special operators and, or, not.</p>
<p>They can be used in Boolean contexts to connect sub contexts. And will evaluate from left to right.</p>
<p><code>1 and True</code> will display <code>True</code></p>
<p><code>True and 1</code> will display <code>1</code></p>
<p><code>0 and True</code> will display <code>0</code></p>
<p><code>1 or True</code> will display <code>1</code></p>
<p><code>True or 1</code> will display <code>True</code></p>
<p><code>0 or True</code> will display <code>True</code></p>
<p><code>0 or False</code> will display <code>False</code></p>
<p>These are examples that show the evaluation order.</p>
<ul>
<li><exp1> <strong>and</strong> <exp2> <strong>and</strong> <exp3> <strong>and</strong>
<ul>
<li>Evaluate to the first false value. If none are false, evaluates to the last expression</li>
</ul></li>
<li><exp1> <strong>or</strong> <exp2> <strong>or</strong> <exp3> <strong>or</strong>
<ul>
<li>Evaluate to first true value. If none are true, evaluates to the last expression</li>
</ul></li>
<li><strong>not</strong> <exp>
<ul>
<li>Evaluates to True if <exp> if a <em>false value</em> and False if <exp> is a <em>true value</em></li>
</ul></li>
</ul>
<h3 id="iteration">Iteration</h3>
<h4 id="while-statements">While Statements</h4>
<p><strong>Execution Rule for While Statements:</strong></p>
<ol type="1">
<li>Evaluate the header’s expression</li>
<li>If it is a true value, execute the (whole) suite, then return to step 1</li>
</ol>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>02 Function</title>
    <url>/2021/07/08/02-Function/</url>
    <content><![CDATA[<h2 id="expressions">Expressions</h2>
<h3 id="primitive-expressions">Primitive Expressions</h3>
<p>numbers, strings and names</p>
<h3 id="arithmetic-expressions">Arithmetic Expressions</h3>
<p>like 1 + 2 or 15 // 3</p>
<h3 id="call-expressions">Call Expressions</h3>
<p>like add(3, 4)</p>
<h3 id="nested-call-expressions">Nested Call Expressions</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-07-08_18-05-23.png" /></p>
<span id="more"></span>
<h2 id="values">Values</h2>
<p>Expressions evaluate to values in one or more steps</p>
<ul>
<li>Primitive expression's value is itself</li>
<li>Arithmetic expression's value is the result</li>
<li>Call expression's value is the return value</li>
</ul>
<h2 id="names">Names</h2>
<p>Values can be assigned to <strong>names</strong> to make referring to them easier.</p>
<p>A name can only be bound to a single value.</p>
<p>One way to introduce a new name in a program is with an <strong>assignment statement</strong>.</p>
<p><code>x = 1 +2 *3 -4 // 5</code></p>
<p>assignment statement like <code>x,y = 1,2</code> called <strong>parallel statement</strong> or <strong>multiple statement</strong></p>
<h3 id="executing-an-assignment-statement">Executing an assignment statement</h3>
<ol type="1">
<li><strong>Evaluate</strong> the expression to the right of =</li>
<li><strong>Bind</strong> the value of the expression to the name to the left of = in the current environment.</li>
</ol>
<p>When bind is done, the value of a name is invariable until rebind. Changing the other variable won't automatically sync the other variable.</p>
<h2 id="functions">Functions</h2>
<p><strong>Functions</strong> allow us to abstract away entire expressions and sequences of computation just in one call expression.</p>
<p>It take in some input (<strong>arguments</strong>) and transform it into an output (<strong>return values</strong>).</p>
<p>To create a functions use def statements.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> &lt;<span class="title">name</span>&gt; (<span class="params">[parameters]</span>):</span></span><br><span class="line">	<span class="keyword">return</span> &lt;<span class="keyword">return</span> expression&gt;</span><br></pre></td></tr></table></figure>
<h3 id="execution-rule-for-def-statements">Execution Rule For Def Statements</h3>
<ol type="1">
<li>Create a function with signature <code>&lt;name&gt; ([parameters])</code></li>
<li>Set the body of that function to be everything indented after the first line</li>
<li>Bind <code>&lt;name&gt;</code> to that function in the current frame</li>
</ol>
<p>def statements are a type of assignment that bind names to function values.</p>
<p>When you evaluate the name of function, you will get a function value back.</p>
<h3 id="calling-user-defined-functions">Calling User-Defined Functions</h3>
<ol type="1">
<li>Create a new <strong>environment frame</strong></li>
<li>Bind the function's parameters to its arguments in that frame</li>
<li>Execute the body of the function in the new environment</li>
</ol>
<p>Creating new frame only after evaluate the operator and operand subexpressions.</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>04 Environment Diagrams</title>
    <url>/2021/07/09/04-Environment-Diagrams/</url>
    <content><![CDATA[<p>A visual tool to keep track of bindings &amp; state of a computer program</p>
<p>They are helpful for debugging.</p>
<h2 id="frames">Frames</h2>
<p>A <strong>frame</strong> keeps track of variable-to-value bindings. Every call expression has a corresponding frame.</p>
<h3 id="global-frame">Global frame</h3>
<p><strong>Global frame</strong> is the starting frame.</p>
<ul>
<li>It doesn't correspond to a specific call expression.</li>
</ul>
<h3 id="parent-frames">Parent frames</h3>
<ul>
<li>The parent of a function is the frame in which <strong>it was defined</strong></li>
<li>If you can't find a variable in the current frame, you check it's parent frame, and so on. If you can't find the variable, <code>NameError</code>.</li>
</ul>
<span id="more"></span>
<h2 id="local-names">Local Names</h2>
<p>Variable Lookup:</p>
<ol type="1">
<li>Lookup name in the current frame</li>
<li>Lookup name in parent frame, its parent frame, and so on</li>
<li>Stop at the global frame</li>
<li>If not found, an error is thrown</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    <span class="keyword">return</span> g(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span>(<span class="params">z</span>):</span></span><br><span class="line">    <span class="keyword">return</span> z + x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = f(<span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>When call g, g's parent frame is Global. So name x will not be found, and python will throw an error.</p>
<h2 id="lambda-expression">Lambda Expression</h2>
<p>Expression that evaluate to functions</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-13_22-01-53.png" /></p>
<p> </p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>05 Higher-Order Functions</title>
    <url>/2021/07/11/05-Higher-Order-Functions/</url>
    <content><![CDATA[<h2 id="higher-order-functions">Higher-Order Functions</h2>
<p>Functions are <strong>first-class</strong>, meaning they can be manipulated as values</p>
<p>A <strong>higher-order function</strong> is:</p>
<ol type="1">
<li>A function that a function as an argument</li>
<li>A function that returns a function as a return value</li>
</ol>
<h3 id="designing-functions">Designing Functions</h3>
<h4 id="describing-functions">Describing Functions</h4>
<p>A function's <strong>domain</strong> is the set of all inputs it might possibly take as arguments.</p>
<p>A function's <strong>range</strong> is the set of output values it might possibly return.</p>
<p>A pure function's <strong>behavior</strong> is the relationship it creates between input and output.</p>
<span id="more"></span>
<h5 id="assert">assert</h5>
<p><code>assert expression [, arguments]</code> equals to</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> expression:</span><br><span class="line">    <span class="keyword">raise</span> AssertionError(arguments)</span><br></pre></td></tr></table></figure>
<p>It can limit the input to satisfy the domain</p>
<h5 id="how-to-designing-functions">How to designing functions</h5>
<p>Give each function exactly <strong>one job</strong>, but make it apply to <strong>many related situations</strong>.</p>
<h4 id="generalizing-patterns-with-arguments">Generalizing Patterns with Arguments</h4>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-07-11_14-22-12_compressed.jpg" /></p>
<h4 id="generalizing-over-computational-processes">Generalizing Over Computational Processes</h4>
<p>The common structure among functions may be a computational process, rather than a number.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">summation</span>(<span class="params">n, term</span>):</span></span><br><span class="line">    total, k = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> k &lt;= n:</span><br><span class="line">        total, k = total + term(k), k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"><span class="comment"># summation takes in a function term, so it is a high-order function.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">identity</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cube</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">pow</span>(x, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_naturals</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, identity)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_cubes</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Sum the first N cubes.</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; sum_cubes(5)</span></span><br><span class="line"><span class="string">    225</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> summation(n, cube)</span><br></pre></td></tr></table></figure>
<h5 id="doctest">Doctest</h5>
<p>You can run test lines in comment by typing <code>python -m doctest -v .py</code> . It will be tested in the interactive interpreter. When you write the comment, just write like what it's like in interactive interpreter.</p>
<h3 id="locally-defined-functions">Locally Defined Functions</h3>
<p> Functions defined within other function bodies are bound to names in a local frame.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_adder</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a function that takes one argument k and returns k + n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three = make_adder(3)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; add_three(4)</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">adder</span>(<span class="params">k</span>):</span></span><br><span class="line">        <span class="keyword">return</span> k + n</span><br><span class="line">    <span class="keyword">return</span> adder</span><br></pre></td></tr></table></figure>
<p><code>adder</code> is a locally defined functions. When you call <code>make_adder</code> with different <code>n</code>, the return values are <strong>function</strong> <code>adder</code> in the <code>make_adder</code> <strong>frame</strong> with different <code>n</code> value.</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>06 Recursion</title>
    <url>/2021/07/13/06-Recursion/</url>
    <content><![CDATA[<h3 id="functional-abstraction">Functional Abstraction</h3>
<h4 id="mechanics">Mechanics</h4>
<p>How does Python execute this program line-by-line</p>
<h4 id="use">Use</h4>
<p>What can a function do</p>
<h2 id="recursion">Recursion</h2>
<h3 id="iterative-algorithm">Iterative Algorithm</h3>
<p>eg.</p>
<p><span class="math display">\[n!=\prod\limits_{k=1}^{n} k\]</span></p>
<h3 id="recursive-algorithm">Recursive Algorithm</h3>
<p>Recursive is useful for solving problems with a naturally repeating structure - they are defined in terms of themselves.</p>
<p>eg.</p>
<p><span class="math display">\[n!=\begin{cases}1 &amp;\text{if n=0}\\n  (n-1)!  &amp;\text{otherwise}\end{cases}\]</span></p>
<span id="more"></span>
<h3 id="recursive-functions">Recursive Functions</h3>
<p>A function is called recursive if the body of that function calls itself, either directly or indirectly.</p>
<h4 id="structure">Structure</h4>
<ol type="1">
<li>One or more <strong>base cases</strong>, usually the smallest input.</li>
<li>One or more ways of <strong>reducing the problem</strong>, and then solving the smaller problem using recursion.</li>
<li>One or more ways of <strong>using the solution to each smaller problem</strong> to solve our larger problem.</li>
</ol>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>08 Sequences &amp; Data Abstraction</title>
    <url>/2021/07/19/08-Sequences-Data-Abstraction/</url>
    <content><![CDATA[<h2 id="sequences">Sequences</h2>
<p>A <strong>sequences</strong> is an ordered collection of values.</p>
<ul>
<li><strong>strings</strong>: sequence of characters</li>
<li><strong>lists</strong>: sequence of any data type</li>
</ul>
<h3 id="sequences-abstraction">Sequences Abstraction</h3>
<p>All sequences have <strong>finite length</strong></p>
<p>Each element in a sequence has a discrete integer <strong>index</strong></p>
<span id="more"></span>
<h3 id="sequences-function">Sequences function</h3>
<p><strong>get item</strong>: get the <em>ith</em> element <code>&lt;seq&gt;[i]</code></p>
<p><strong>slice a subsequence</strong>: create a copy of the sequence from i to j <code>&lt;seq&gt;[i:j:step]</code></p>
<p><strong>check membership</strong>: check if the value of <code>&lt;expr&gt;</code> is in <code>&lt;seq&gt;</code> <code>&lt;expr&gt; in &lt;seq&gt;</code></p>
<p><strong>concatenate</strong>: combine two sequence into a single sequence <code>&lt;s1&gt; + &lt;s2&gt;</code></p>
<h3 id="sequences-processing">Sequences Processing</h3>
<h4 id="iterating-through-sequence">Iterating through sequence</h4>
<p>You can use a <strong>for statement</strong> to iterate through the elements of a sequence</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> &lt;name&gt; <span class="keyword">in</span> &lt;seq&gt;:</span><br><span class="line">    &lt;body&gt;</span><br></pre></td></tr></table></figure>
<p><em>Rules for execution</em>:</p>
<p>For each element in <code>&lt;seq&gt;</code>:</p>
<ol type="1">
<li>Bind it to <code>&lt;name&gt;</code></li>
<li>Execute <code>&lt;body&gt;</code></li>
</ol>
<h4 id="range">Range</h4>
<p>The <strong>range</strong> function creates a sequence containing the values within a specified range.</p>
<p><code>range(&lt;start&gt;, &lt;end&gt;, &lt;step&gt;)</code></p>
<p>Creates a range object from <code>&lt;start&gt;</code> (inclusive) to <code>&lt;end&gt;</code>(exclusive), skipping every<code>&lt;step&gt;</code> element</p>
<h4 id="list-comprehensions">List Comprehensions</h4>
<p>Yon can create out a list out of a sequence using a <strong>list comprehension</strong>:</p>
<p><code>[&lt;expr&gt; for &lt;name&gt; in &lt;seq&gt; if &lt;cond&gt;]</code></p>
<p><em>Rules for execution</em>:</p>
<ol type="1">
<li>Create an empty result list that will be the value of the list comprehension</li>
<li>For each element in <code>&lt;seq&gt;</code>:
<ul>
<li>Bind to that element to <code>&lt;name&gt;</code></li>
<li>If <code>&lt;cond&gt;</code> evaluates to a true value, then add the value of <code>&lt;expr&gt;</code> to the result list</li>
<li><strong>Note</strong>: binding to <code>&lt;name&gt;</code> will not overwrite local bindings</li>
</ul></li>
</ol>
<h2 id="data-abstraction">Data Abstraction</h2>
<ul>
<li><strong>Compound values</strong> combine other values together
<ul>
<li>A data: a year, a month and a day</li>
<li>A geographic position: latitude and longitude</li>
</ul></li>
<li><strong>Data abstraction</strong> lets us manipulate compound values as units</li>
<li>Isolate two parts of any program that uses data:
<ul>
<li>How data are <strong>represented</strong></li>
<li>How data are <strong>manipulated</strong></li>
</ul></li>
<li>Data abstraction: A methodology by which functions enforce an abstraction barrier between <strong>representation</strong> and <strong>use</strong></li>
</ul>
<h3 id="rational-numbers">Rational Numbers</h3>
<p><span class="math display">\[\frac{numerator}{denominator}\]</span></p>
<p>Exact representation as fractions</p>
<p>A pair of integers</p>
<p>As soon as division occurs, the exact representation may be lost! (Demo)</p>
<p>Assume we can compose and decompose rational numbers:</p>
<ul>
<li><code>rational(n, d)</code> returns a rational number x <strong>Constructor</strong></li>
<li><code>numer(x)</code> returns the numerator of x <strong>Selectors</strong></li>
<li><code>denom(x)</code> returns the denominator of x <strong>Selectors</strong></li>
</ul>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>09 Functional Decomposition &amp; Debugging</title>
    <url>/2021/07/22/09-Functional-Decomposition-Debugging/</url>
    <content><![CDATA[<h2 id="program-decomposition">Program Decomposition</h2>
<ul>
<li>The process of breaking a large problem into more manageable sub-problems</li>
<li>Goals of Program Decomposition
<ul>
<li>Complexity Management</li>
<li>Reusability and abstraction</li>
</ul></li>
</ul>
<h3 id="the-black-box">The "Black Box"</h3>
<ul>
<li>A "black box" is opaque - its inner workings are <strong>not revealed</strong></li>
<li>Decomposition is a divide and conquer strategy.</li>
</ul>
<span id="more"></span>
<h3 id="function-rules-in-practice">Function Rules in Practice</h3>
<p>A function should solve <strong>one problem</strong></p>
<p>A function should have the <strong>smallest number of parameters</strong> possible to solve its problem</p>
<p>A <strong>repeated sequence</strong> should be put in its own function</p>
<h2 id="debugging">Debugging</h2>
<h3 id="doctests">Doctests</h3>
<p>python -m doctest test.py</p>
<h4 id="environment-diagrams">Environment Diagrams</h4>
<h3 id="print-debugging">Print Debugging</h3>
<h3 id="preventing-bugs-assert-statements">Preventing Bugs: Assert Statements</h3>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>10 Trees</title>
    <url>/2021/08/01/10-Trees/</url>
    <content><![CDATA[<h2 id="sequence-aggregation">Sequence Aggregation</h2>
<p><strong>Iterable</strong> - an object capable of returning its members one at a time.</p>
<p>Some functions take iterable arguments and aggregate them into a value:</p>
<ul>
<li><code>sum(iterable[, start]) -&gt; value</code></li>
<li><code>max(iterable[, key=func]) -&gt; value</code></li>
</ul>
<h2 id="tree">Tree</h2>
<h3 id="tree-abstraction">Tree Abstraction</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/2021-07-22_17-09-57_compressed.jpg"  /></p>
<span id="more"></span>
<h3 id="tree-abstraction-implementation">Tree Abstraction Implementation</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constructor</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tree</span>(<span class="params">label, branches=[]</span>):</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches:</span><br><span class="line">        <span class="keyword">assert</span> is_tree(branch)</span><br><span class="line">    <span class="keyword">return</span> [label] + <span class="built_in">list</span>(branches)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># Selectors</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">label</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">branches</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> tree[<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_tree</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(tree) !=<span class="built_in">list</span> <span class="keyword">or</span> <span class="built_in">len</span>(tree) &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> branch <span class="keyword">in</span> branches(tree):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_tree(branch):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">     <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">tree</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> branches(tree)</span><br></pre></td></tr></table></figure>
<h2 id="tree-processing">Tree Processing</h2>
<h3 id="recursion">Recursion</h3>
<ol type="1">
<li>The base case is the smallest version of the problem, many times if its a leaf</li>
<li>The recursive call happens on smaller subproblems, which tend to be branches</li>
<li>We use the recursive calls with some type of aggregation afterward to get our final solution</li>
</ol>
<h3 id="count-nodes-in-a-tree">Count Nodes in a Tree</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count_tree</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    total = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        total += count_nodes(b)</span><br><span class="line">    <span class="keyword">return</span> total</span><br></pre></td></tr></table></figure>
<h3 id="collect-the-leaves">Collect the Leaves</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collect_leaves</span>():</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> [label(t)]</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        lst += collect_leaves()</span><br><span class="line">    <span class="keyword">return</span> lst</span><br></pre></td></tr></table></figure>
<h3 id="print-tree"> Print Tree</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_tree</span>(<span class="params">t, indent=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*indent, label(t))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>*indent, label(t))</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">            print_tree(b, indent + <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="creating-tree">Creating Tree</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square_tree</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="keyword">if</span> is_leaf(t):</span><br><span class="line">        <span class="keyword">return</span> tree(label(t)**<span class="number">2</span>)</span><br><span class="line">    lst = []</span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> branches(t):</span><br><span class="line">        lst += square_tree(b)</span><br><span class="line">     <span class="keyword">return</span> tree(label(t) ** <span class="number">2</span>, lst)</span><br></pre></td></tr></table></figure>
<h3 id="fib-tree">Fib Tree</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fib_tree</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">elif</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> tree(<span class="number">1</span>)</span><br><span class="line">    left = fib_tree(n-<span class="number">2</span>)</span><br><span class="line">    right = fib_tree(n-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> tree(label(left) + label(right), [left, ight])</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>12 Mutable Functions &amp; Growth</title>
    <url>/2021/08/17/12-Mutable-Functions-Growth/</url>
    <content><![CDATA[<h2 id="mutable-functions">Mutable Functions</h2>
<p>Functions with behavior that changes over time</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">square</span>(<span class="params">x</span>):</span> <span class="comment">#pure function</span></span><br><span class="line">    <span class="keyword">return</span> x * x</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span> <span class="comment"># mutable function</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>square(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</span><br><span class="line"><span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f(<span class="number">5</span>)</span><br><span class="line"><span class="number">26</span></span><br></pre></td></tr></table></figure>
<p><strong>High-order function can be used in implementing mutable functions, variables can be stored in parent frame.</strong></p>
<span id="more"></span>
<h3 id="non-local-assignment-persistent-local-state">Non-Local Assignment &amp; Persistent Local State</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span>(<span class="params">balance</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a withdraw function with a starting balance.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">amount</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> balance </span><br><span class="line">        <span class="comment"># eclare the name &quot;balance&quot; nonlocal at the top of the</span></span><br><span class="line">        <span class="comment"># body of the function in which it is re-assigned</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; balance:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        balance = balance - amount</span><br><span class="line">        <span class="comment"># Re-bind balance in the first non-local frame</span></span><br><span class="line">        <span class="comment"># in which it was bound previously</span></span><br><span class="line">        <span class="keyword">return</span> balance</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<h4 id="the-effect-of-nonlocal-statements">The Effect of Nonlocal Statements</h4>
<p><code>nonlocal &lt;name&gt;</code></p>
<p><strong>Effect</strong>: Future assignments to that name changes its pre-existing binding in the <strong>first non-local frame</strong> of the current environment in which that name is bound.</p>
<p>Rules:</p>
<ul>
<li>First non-local frame must not be <strong>global frame</strong></li>
<li>Names listed in nonlocal statement must not collide with pre-existing bindings in the local scope.</li>
</ul>
<h4 id="python-particulars">Python Particulars</h4>
<p>Python <strong>pre-computes</strong> which frame contains each name before executing the body of a function. Within the body of a function, all instances of a name must <strong>refer to the same frame</strong>.</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-14_18-27-42.png" /></p>
<h4 id="mutable-values-persistent-local-state">Mutable Values &amp; Persistent Local State</h4>
<p>Mutable values can be changed mutably without a nonlocal statement.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_withdraw</span>(<span class="params">balance</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return a withdraw function with a starting balance.&quot;&quot;&quot;</span></span><br><span class="line">    b = [balance]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">withdraw</span>(<span class="params">amount</span>):</span></span><br><span class="line">        <span class="keyword">if</span> amount &gt; b[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Insufficient funds&#x27;</span></span><br><span class="line">        b[<span class="number">0</span>] = b[<span class="number">0</span>] - amount</span><br><span class="line">        <span class="keyword">return</span> b[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> withdraw</span><br></pre></td></tr></table></figure>
<h2 id="program-performance">Program Performance</h2>
<h3 id="measuring-growth">Measuring Growth</h3>
<p>Different functions run in different amounts of time</p>
<ul>
<li>Different implementations of the same program can also run in different amounts of time</li>
</ul>
<p>How do we measure this ?</p>
<ul>
<li>Amount of time taken to run once ?</li>
<li>Average time taken to run ?</li>
<li>Average across a bunch of different computers ?</li>
<li><strong>Number of operations</strong></li>
</ul>
<h3 id="improving-number-of-operations">Improving Number of Operations</h3>
<ul>
<li>Some tools can be used to speed up programs (Ex: memorization, up next)</li>
<li>Other times, need to have a different approach or incorporate some insight</li>
</ul>
<h3 id="how-to-count-calls">How to count calls</h3>
<ul>
<li>For an iterative function: step through the program, and identify how many times you need to go through the loop before exiting</li>
<li>For a recursive function: draw out an environment diagram/call tree</li>
</ul>
<h3 id="common-patterns">Common Patterns</h3>
<h4 id="constant-growth">Constant Growth</h4>
<p>Operations the same regardless of input size</p>
<h4 id="liner-growth">Liner Growth</h4>
<p>Increasing input by 1 adds a constant amount of operations</p>
<h4 id="logarithmic-growth">Logarithmic Growth</h4>
<p>Operations grow only when input is multiplied</p>
<h4 id="exponential-growth">Exponential Growth</h4>
<p>Increasing input by 1 doubles(or triples, etc.) operati</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>11 Mutable Sequences</title>
    <url>/2021/08/11/11-Mutable-Sequences/</url>
    <content><![CDATA[<p>本质上用+、切片得到的列表都是浅复制的新列表，是将列表视为immutable的</p>
<h2 id="mutation-operations">Mutation Operations</h2>
<h5 id="use-index-to-change-value">Use index to change value</h5>
<p><code>lst[0] = 0</code></p>
<h4 id="list-mutation">List Mutation</h4>
<p><code>append(el)</code>: adds el to the end of the list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.append(<span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p><code>insert(i, el)</code>: inserts el at index i</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.insert(<span class="number">2</span>, <span class="number">2.5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">2.5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>extend(seq)</code>: adds elements in seq one by one to the end of the list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.extend([<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>remove(el)</code>: removes the first occurrence of el from the list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p><code>pop(i)</code>: removes <em>and returns</em> the element at index i</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.pop(<span class="number">3</span>)</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<h4 id="dictionaries-mutation">Dictionaries Mutation</h4>
<p>The keys of dictionary must be immutable</p>
<h2 id="immutable-values">Immutable Values</h2>
<ul>
<li>Strings</li>
<li>Tuples</li>
</ul>
<h2 id="mutating-in-functions">Mutating in Functions</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mystery</span>(<span class="params">lst</span>):</span> <span class="comment"># mutative function</span></span><br><span class="line"><span class="meta">... </span>    lst.pop()</span><br><span class="line"><span class="meta">... </span>    lst.pop()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>four = [<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mystery(four)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>four</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">mystery2</span>(<span class="params">x</span>):</span> <span class="comment"># mutative function</span></span><br><span class="line"><span class="meta">... </span>    lst.append(x)</span><br><span class="line"><span class="meta">... </span>    lst.append(x)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">4</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mystery2(<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<p>When you use mutation within functions, it will operate the variables itself. Outside the functions, the variables change as well.</p>
<h2 id="identity-versus-equality">Identity Versus Equality</h2>
<h4 id="identity">Identity</h4>
<p><code>&lt;expr0&gt; is&lt;expr1&gt;</code></p>
<p>evaluates to True if both<code>&lt;expr0&gt;</code>and<code>&lt;expr1&gt;</code>evaluate to <strong>the</strong> <strong>same object</strong> (same memory address)</p>
<h4 id="equality">Equality</h4>
<p><code>&lt;expr0&gt; == &lt;expr1&gt;</code> evaluates to True if both <code>&lt;expr0&gt;</code>and <code>&lt;expr1&gt;</code>evaluates to <strong>equal values</strong></p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>HW 03 Church Numerals</title>
    <url>/2021/08/11/HW-03-Church-Numerals/</url>
    <content><![CDATA[<h2 id="背景">背景</h2>
<blockquote>
<p>The logician Alonzo Church invented a system of representing non-negative integers entirely using functions. The purpose was to show that functions are sufficient to describe all of number theory: if we have functions, we do not need to assume that numbers exist, but instead we can invent them.</p>
</blockquote>
<p>逻辑学家阿隆索·邱奇发明了一个利用函数表示自然数的系统。</p>
<blockquote>
<p>Your goal in this problem is to rediscover this representation known as Church numerals. Here are the definitions of zero, as well as a function that returns one more than its argument:</p>
</blockquote>
<p>我们的目标就是实现Church numerals，零和一的定义如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">successor</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: f(n(f)(x))</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h2 id="定义一和二">定义一和二</h2>
<blockquote>
<p>First, define functions one and two such that they have the same behavior as successor(zero) and successsor(successor(zero)) respectively, but do not call successor in your implementation.</p>
</blockquote>
<p>首先我们要实现一和二的定义，在此之前我们可以分析一下零和一是怎么用函数表示的。</p>
<p>零的定义是<span class="math inline">\(F_{zero}(x)=x\)</span>，我们将零带入successor可以得到<span class="math inline">\(F_{one}(x)=f(x)\)</span>，那么显而易见二就是<span class="math inline">\(F_{two}(x)=f(f(x))\)</span>，以此类推。那么一和二很容易就可以定义出来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 1: same as successor(zero)&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">two</span>(<span class="params">f</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Church numeral 2: same as successor(successor(zero))&quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> x: f(f(x))</span><br></pre></td></tr></table></figure>
<h2 id="将-church-numeral-转化为整数">将 church numeral 转化为整数</h2>
<blockquote>
<p>Next, implement a function church_to_int that converts a church numeral argument to a regular Python integer.</p>
</blockquote>
<p>接下来是实现 church numeral 到整数的转化。</p>
<p>从这一题开始就渐渐开始难度了。由定义可知，church numeral 是一个 high-order function，返回的是函数本身，这个返回的函数的参数是一个函数，同时返回函数也是一个函数，参数是x。</p>
<p><span class="math display">\[\text{设}g(x)=-x\]</span> <span class="math display">\[one(g)(1)=g(1)=-1\]</span> <span class="math display">\[two(g)(1)=g(g(1))=1\]</span></p>
<p>由上面那个例子可能能帮助大家更直观的理解church numeral的构成，转化到整数最关键的是传入函数<span class="math inline">\(f\)</span>如何构造。可以看到数字与函数调用的次数是一样的，如果每次调用的时候加1，就可以实现转化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">church_to_int</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Convert the Church numeral n to a Python integer.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(zero)</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(one)</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(two)</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(three)</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n(<span class="keyword">lambda</span> x: x + <span class="number">1</span>)(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="定义运算">定义运算</h2>
<blockquote>
<p>Finally, implement functions add_church, mul_church, and pow_church that perform addition, multiplication, and exponentiation on church numerals.</p>
</blockquote>
<p>最后来构造加法、乘法和乘方运算。</p>
<h3 id="加法">加法</h3>
<p>我们还是先从公式的角度分析一下 <span class="math display">\[n+m=\underbrace{f(f(\cdots(f}_{n+m}(x))))\]</span> 得到 n+m 只需有 n+m 个<span class="math inline">\(f\)</span>复合就可以，即 <span class="math display">\[\begin{aligned}
n+m&amp;=F_n(f)(F_m(f)(x))\\
&amp;=\underbrace{f(f(\cdots(f}_{n}(F_m(f)(x)))))\\
&amp;=\underbrace{f(f(\cdots(f}_{n}(\underbrace{f(f(\cdots(f}_{m}(x)))))
\end{aligned}\]</span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m + n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(add_church(two, three))</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: <span class="keyword">lambda</span> x: n(f)(m(f)(x))</span><br></pre></td></tr></table></figure>
<h3 id="乘法">乘法</h3>
<p><span class="math display">\[n\times m=\underbrace{f(f(\cdots(f}_{n\times m}(x))))\]</span> n是n个<span class="math inline">\(f(x)\)</span>复合，m是m个<span class="math inline">\(f(x)\)</span>复合，<span class="math inline">\(n\times m\)</span>是n个m个<span class="math inline">\(f(x)\)</span>复合</p>
<p>我们先将n个m写出来，每个<span class="math inline">\(F_m\)</span>是m个<span class="math inline">\(f(x)\)</span>，得到</p>
<p><span class="math display">\[\begin{aligned}
n\times m&amp;=F_n(F_m(f))(x)\\
&amp;=\underbrace{F_m(f)(F_m(f)(\cdots(F_m}_{n}(f)(x))))\\
&amp;=\underbrace{\underbrace{f(f(\cdots(f}_{m}(\underbrace{f(f(\cdots(f}_{m}(\cdots(\underbrace{f(f(\cdots(f}_{m}}_{n}(x))))
\end{aligned}\]</span></p>
<p>即<span class="math inline">\(n\times m\)</span> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral for m * n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; four = successor(three)</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(two, three))</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(mul_church(three, four))</span></span><br><span class="line"><span class="string">    12</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">lambda</span> f: n(m(f))</span><br></pre></td></tr></table></figure></p>
<h3 id="乘方">乘方</h3>
<p><span class="math display">\[m^n=\underbrace{f(f(\cdots(f}_{m^n}(x))))\]</span></p>
<p>和乘法类似，这次我们需要n个m个m，也就是n个<span class="math inline">\(m\times m\)</span>，先上推导再解释</p>
<p><span class="math display">\[\begin{aligned}
m^n&amp;=F_n(F_m)(f)(x)\\
&amp;=\underbrace{F_m(F_m(\cdots(F_m}_{n})))(f)(x)\\
&amp;=\underbrace{F_m(F_m(\cdots(F_m(}_{n-1}\underbrace{f(f(\cdots(f}_{m})))(x)\\
&amp;=\underbrace{F_m(F_m(\cdots(F_m(}_{n-2}\underbrace{f(f(\cdots(f}_{m\times m})))(x)\\
&amp;\qquad \vdots\\
&amp;=F_m(\underbrace{f(f(\cdots(f}_{m^{n-1}})))(x)\\
&amp;=\underbrace{f(f(\cdots(f}_{m^n}(x))))
\end{aligned}\]</span> 这里 evaluate 的顺序很关键，第一步<span class="math inline">\(F_n\)</span>将n个<span class="math inline">\(F_m\)</span>复合，之后<span class="math inline">\(f\)</span>作为<span class="math inline">\(F_n\)</span>第二个参数被传入，最里层变为<span class="math inline">\(F_m(f)\)</span>开始复合，一层层向外，最外层<span class="math inline">\(x\)</span>作为<span class="math inline">\(F_m\)</span>的第二个参数被传入。实际程序运行的顺序肯定和这里不完全一样，但是基本思路是这样的。一开始可能想不明白这个和乘法有什么区别，乘法复合的是<span class="math inline">\(F_m\)</span>第二个参数，乘方复合的是<span class="math inline">\(F_m\)</span>第一个参数，无论是 debug 还是 environment diagram 都没有办法形象的展现这个程序的运行方式，只能靠意会了。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pow_church</span>(<span class="params">m, n</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the Church numeral m ** n, for Church numerals m and n.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(two, three))</span></span><br><span class="line"><span class="string">    8</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; church_to_int(pow_church(three, two))</span></span><br><span class="line"><span class="string">    9</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="string">&quot;*** YOUR CODE HERE ***&quot;</span></span><br><span class="line">    <span class="keyword">return</span> n(m)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+Next+GitHub Page 建立博客</title>
    <url>/2021/08/14/Hexo-Next-GitHub-Page-%E5%BB%BA%E7%AB%8B%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>虽然 Hexo 和 Next 都有完整的 doc 供你参考，但我觉得还是有必要写这样一篇文章帮助我以及可能会看这篇文章的你记录一下我搭建的过程，以及踩过的坑。</p>
<span id="more"></span>
<h2 id="安装依赖">安装依赖</h2>
<h3 id="安装git">安装Git</h3>
<p><a href="https://git-scm.com/download/win">Git下载链接</a></p>
<p>Git是开源的分布式版本控制系统，用于将网站上传到GitHub。</p>
<p>下载安装后右键资源管理器会出现Git Bash Here，Git Bash是Git自带的命令行工具，可以在里面打命令（CMD和PowerShell也是可以的）</p>
<h3 id="配置git环境">配置Git环境</h3>
<h4 id="设置user.name和user.email配置信息">设置<code>user.name</code>和<code>user.email</code>配置信息</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<h4 id="配置ssh">配置SSH</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>之后一路回车就好，生成后可以到<code>c:\users\yourname\.ssh</code>中找到<code>id_rsa.pub</code></p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/v2-d1e47103ec1aa8675f68688c5d63bd27_720w.jpg" /></p>
<p>复制里面的内容（不要用微软Publisher打开，用Editor打开），打开 <a href="https://github.com/settings/keys">GitHub Setting Keys</a> 页面，新建new SSH Key</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/v2-72a3f22c080e99343c3cc4aabce10e3c_720w.jpg" /></p>
<p>Title是标题，填入任何你想填的内容即可，Key中复制刚才id_rsa.pub的内容，点击Add SSH Key即可生成SSH key。</p>
<p>在命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure>
<p>提示</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi ZHDreamer! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">Connection to github.com closed.</span><br></pre></td></tr></table></figure>
<p>证明配置成功</p>
<p>GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了SSH，当你推送的时候，Git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h3 id="安装node.js">安装Node.js</h3>
<p><a href="https://nodejs.org/en/download/">Node.js下载地址</a></p>
<p>Hexo基于Node.js，安装后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>
<p>验证是否成功安装Node.js和npm</p>
<h2 id="hexo-的安装与使用">Hexo 的安装与使用</h2>
<h3 id="安装hexo">安装Hexo</h3>
<p>使用npm命令安装Hexo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>安装完成后就可以用<a href="https://hexo.io/docs/commands">Hexo命令</a>建立博客了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>此时输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>即可在<code>localhost:4000</code>看到建立的博客了</p>
<h3 id="推送到github">推送到GitHub</h3>
<p><a href="https://hexo.io/docs/one-command-deployment">官方文档</a></p>
<p>安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>在根目录下有一个<code>_config.yml</code>文件，是Hexo的==站点配置文件==，更改deploy配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/ZHDreamer/ZHDreamer.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h3 id="hexo的设置">Hexo的设置</h3>
<p><a href="https://hexo.io/docs/configuration">官方文档</a></p>
<h2 id="next安装与使用">NexT安装与使用</h2>
<p><a href="https://theme-next.js.org/">官方网站</a> ，其他网站的信息或多或少有些过时，包括<a href="http://theme-next.iissnan.com/">这个网站</a>和GitHub上面的教程</p>
<h3 id="下载next">下载NexT</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>
<h3 id="启用next">启用NexT</h3>
<p>在站点配置文件中修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>
<p>此时输入<code>hexo clean</code>清理缓存后再次启动本地服务器，即可看到主题变为NexT</p>
<h3 id="next的设置">NexT的设置</h3>
<p>在<code>theme\next</code>下有一个<code>_config.yml</code>文件，是NexT的==主题配置文件==，在这个文件中修改NexT设置</p>
<h3 id="更改next主题">更改NexT主题</h3>
<p>NexT目前提供四种主题，在==主题配置文件==</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure>
<p>去掉主题配置文件中的注释即可切换主题</p>
<h3 id="添加tagscategories等页面">添加tags,categories等页面</h3>
<p>在==主题配置文件==</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Menu Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Usage: `Key: /link/ || icon`</span></span><br><span class="line"><span class="comment"># Key is the name of menu item. If the translation for this item is available, the translated text will be loaded, otherwise the Key name will be used. Key is case-senstive.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target link, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="comment"># External url should start with http:// or https://</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="comment">#about: /about/ || fa fa-user</span></span><br><span class="line">  <span class="comment">#tags: /tags/ || fa fa-tags</span></span><br><span class="line">  <span class="comment">#categories: /categories/ || fa fa-th</span></span><br><span class="line">  <span class="comment">#archives: /archives/ || fa fa-archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enable / Disable menu icons / item badges.</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p>去掉注释即可解锁相应页面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure>
<p>在<code>source\</code>下会生成一个tags文件夹，里面有一个index.md，添加<code>type: "tags"</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2021-08-13 16:53:54</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>其他类型的页面都可以这样操作</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>bulid</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 问题处理备份</title>
    <url>/2021/08/12/Hexo-%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86%E5%A4%87%E4%BB%BD/</url>
    <content><![CDATA[<p>Hexo使用起来小毛病很多，防止以后浪费时间再去搜索，在这里备份一下各个问题成功的解决方法。</p>
<h2 id="next-相关问题">NexT 相关问题</h2>
<h3 id="next-项目更新到了新的项目">NexT 项目更新到了新的项目</h3>
<p>很多老教程安装的NexT是老版本，就会导致以下标注旧版本的种种问题，折腾了一天才发现问题的根源，所以还是多参考官方doc吧</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next themes/next //旧版本，已经过时</span><br><span class="line">git clone https://github.com/next-theme/hexo-theme-next themes/next //新版本</span><br></pre></td></tr></table></figure>
<h3 id="next-主题无法显示旧版本">NexT 主题无法显示（旧版本）</h3>
<p>报错<code>&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</code></p>
<p>原因是Hexo在5.0之后把swig给删除了需要自己手动安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="菜单栏修改问题旧版本">菜单栏修改问题（旧版本）</h3>
<p>Next在主题的<code>_config.yml</code>文件中提供菜单栏的修改，只要搜索menu就可以找到，通过去除注释即可以在网页上进行渲染。然而在修改next中的menu时会发现存在这样的报错 “cannot get %20” -- 无法找到相应的菜单。出现的原因是官方给的代码中多加了一个空格，导致网页无法渲染，个人除了删除注释外，要将“||”前的空格删除不然会导致菜单没法跳转。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>
<h3 id="侧边栏大纲中文无法跳转旧版本">侧边栏大纲中文无法跳转（旧版本）</h3>
<p>英文可以正常跳转，中文不行</p>
<p>根据报错发现是<code>Blog\themes\next\source\js\src\post-details.js</code>的问题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// TOC item animation navigate &amp; prevent #item selector in adress bar.</span></span><br><span class="line">$(<span class="string">&#x27;.post-toc a&#x27;</span>).on(<span class="string">&#x27;click&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">  e.preventDefault();</span><br><span class="line">  &lt;!-- targetSelector 解析UTF8的问题 -&gt;</span><br><span class="line">  <span class="keyword">var</span> targetSelector = NexT.utils.escapeSelector(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>));</span><br><span class="line">  &lt;!-- 添加下面这行代码, 重新解析 URL -&gt;</span><br><span class="line">  targetSelector = <span class="built_in">decodeURI</span>(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;href&#x27;</span>))</span><br><span class="line">  <span class="keyword">var</span> offset = $(targetSelector).offset().top;</span><br><span class="line"></span><br><span class="line">  hasVelocity ?</span><br><span class="line">    html.velocity(<span class="string">&#x27;stop&#x27;</span>).velocity(<span class="string">&#x27;scroll&#x27;</span>, &#123;</span><br><span class="line">      <span class="attr">offset</span>: offset  + <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">      <span class="attr">mobileHA</span>: <span class="literal">false</span></span><br><span class="line">    &#125;) :</span><br><span class="line">    $(<span class="string">&#x27;html, body&#x27;</span>).stop().animate(&#123;</span><br><span class="line">      <span class="attr">scrollTop</span>: offset</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="翻页显示i-classfa-fa-angle-righti旧版本">翻页显示<code>&lt;i class="fa fa-angle-right"&gt;&lt;/i&gt;</code>（旧版本）</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/20191201150136673.png" /></p>
<p><a href="https://github.com/hexojs/hexo/issues/3794">参考</a></p>
<p>修改<code>Blog/themes/next/layout/_partials/pagination.swig</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;%- if page.prev or page.next %&#125;</span><br><span class="line"> &lt;nav class=&quot;pagination&quot;&gt;</span><br><span class="line">   &#123;&#123;</span><br><span class="line">     paginator(&#123;</span><br><span class="line">       prev_text: &#x27;&lt;i class=&quot;fa fa-angle-left&quot; aria-label=&quot;&#x27;+__(&#x27;accessibility.prev_page&#x27;)+&#x27;&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">       next_text: &#x27;&lt;i class=&quot;fa fa-angle-right&quot; aria-label=&quot;&#x27;+__(&#x27;accessibility.next_page&#x27;)+&#x27;&quot;&gt;&lt;/i&gt;&#x27;,</span><br><span class="line">       mid_size: 1,</span><br><span class="line">       escape: false</span><br><span class="line">     &#125;)</span><br><span class="line">   &#125;&#125;</span><br><span class="line"> &lt;/nav&gt;</span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="公式渲染出现问题旧版本">公式渲染出现问题（旧版本）</h3>
<p>多行公式<code>\\</code>和下标<code>_</code>无法正常显示</p>
<h4 id="原因分析">原因分析</h4>
<p>Hexo默认使用<code>hexo-renderer-marked</code>引擎渲染网页，该引擎会把一些特殊的markdown符号转换为相应的html标签，比如在markdown语法中，下划线<code>_</code>代表斜体，会被渲染引擎处理为<code>&lt;em&gt;</code>标签。</p>
<p>因为类Latex格式书写的数学公式下划线<code>_</code>表示下标，有特殊的含义，如果被强制转换为<code>&lt;em&gt;</code>标签，那么MathJax引擎在渲染数学公式的时候就会出错。例如，<span class="math inline">\(x_i\)</span>​在开始被渲染的时候，处理为$x<code>&lt;em&gt;</code>i<code>&lt;/em&gt;</code>$​，这样MathJax引擎就认为该公式有语法错误，因为不会渲染。</p>
<p>类似的语义冲突的符号还包括'*', '{', '}', ''等。</p>
<h4 id="解决方法">解决方法</h4>
<p>更换Hexo的markdown渲染引擎，<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fsun11%2Fhexo-renderer-kramed">hexo-renderer-kramed</a>引擎是在默认的渲染引擎<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo-renderer-marked">hexo-renderer-marked</a>的基础上修改了一些bug，两者比较接近，也比较轻量级。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm uninstall hexo-renderer-marked</span><br><span class="line">npm install hexo-renderer-kramed</span><br></pre></td></tr></table></figure>
<p>卸载掉旧的渲染引擎，安装新引擎</p>
<p>然后，跟换引擎后行间公式可以正确渲染了，但是这样还没有完全解决问题，行内公式的渲染还是有问题，因为<code>hexo-renderer-kramed</code>引擎也有语义冲突的问题。接下来到博客根目录下，找到<code>node_modules\kramed\lib\rules\inline.js</code>，把第11行的<code>escape</code>变量的值做相应的修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  escape: /^\\([\\`*&#123;&#125;\[\]()#$+\-.!_&gt;])/,</span></span><br><span class="line">  <span class="attr">escape</span>: <span class="regexp">/^\\([`*\[\]()#$+\-.!_&gt;])/</span></span><br></pre></td></tr></table></figure>
<p>这一步是在原基础上取消了对,{,}的转义(escape)。</p>
<p>同时把第20行的<code>em</code>变量也要做相应的修改。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  em: /^\b_((?:__|[\s\S])+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span></span><br><span class="line">  <span class="attr">em</span>: <span class="regexp">/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/</span></span><br></pre></td></tr></table></figure>
<p>重新启动 Hexo 即可解决</p>
<h3 id="公式渲染出现问题新版本">公式渲染出现问题（新版本）</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm un hexo-renderer-marked</span><br><span class="line">npm i hexo-renderer-pandoc</span><br></pre></td></tr></table></figure>
<p>这样以后仍然会有一些问题，<code>\\</code>在一般多行公式无法生效，要加入<code>gather</code>环境才能使其生效，或者直接用多个多行公式</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Hexo</category>
        <category>NexT</category>
      </categories>
      <tags>
        <tag>issues</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 alt+tab 出现多个edge标签</title>
    <url>/2021/08/20/Windows-10-alt-tab-%E5%87%BA%E7%8E%B0%E5%A4%9A%E4%B8%AAedge%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<p>在edge打开了多个标签页会发现alt+tab出现了edge标签页</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/20200830093038337.jpg" /></p>
<p>可以在windows设置里面找到<strong>多任务处理</strong>，修改alt+tab将显示仅打开的窗口</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-20_17-00-23.png" /></p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Issues</category>
      </categories>
      <tags>
        <tag>edge</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10 去除资源管理器(文件夹)多余文件夹</title>
    <url>/2021/08/23/Windows-10-%E5%8E%BB%E9%99%A4%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86%E5%99%A8-%E6%96%87%E4%BB%B6%E5%A4%B9-%E5%A4%9A%E4%BD%99%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h3 id="关闭导航栏多余文件夹">关闭导航栏多余文件夹</h3>
<p>正常状态下你的Windows10资源管理器可能是这样的</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-23_14-19-54.png" /></p>
<p>可以看到左边有很多乱七八糟的文件，因为win10的逻辑是显示所有桌面的文件</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-23_14-20-46.png" /></p>
<p>在空白处右键关闭库和显示所有文件夹，此时显示逻辑就会回到win7的模式，以我的电脑方式呈现</p>
<span id="more"></span>
<h3 id="去除此电脑中多余的文件夹">去除此电脑中多余的文件夹</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-23_14-09-48.png" /></p>
<p>通过修改注册表值可以关闭这些文件夹，删掉注释复制下面代码写入<code>.reg</code>文件即可，也可以自行修改保留需要的文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">For Pictures folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;0ddd015d-b06c-45d5-8c4c-f59713854639&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For Videos folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;35286a68-3c57-41a1-bbb1-0eae73d76c95&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For Downloads folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;7d83ee9b-2244-4e70-b1f5-5393042af1e4&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For Music folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;a0c69a99-21c8-4671-8703-7934162fcf1d&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For Documents folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;f42ee2d3-909f-4907-8871-4c22fc0bf756&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For Desktop folder:</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">For 3D Objects:</span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;]</span><br><span class="line"></span><br><span class="line">Some 3rd party 32-bit programs may still show these unnecessary 6 folders in “Browse” dialog box</span><br><span class="line">Code below is to remove them</span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;0ddd015d-b06c-45d5-8c4c-f59713854639&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;35286a68-3c57-41a1-bbb1-0eae73d76c95&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;7d83ee9b-2244-4e70-b1f5-5393042af1e4&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;a0c69a99-21c8-4671-8703-7934162fcf1d&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;f42ee2d3-909f-4907-8871-4c22fc0bf756&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Hide&quot;</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;]</span><br></pre></td></tr></table></figure>
<p>想要复原也很简单，只需执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;0ddd015d-b06c-45d5-8c4c-f59713854639&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;35286a68-3c57-41a1-bbb1-0eae73d76c95&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;7d83ee9b-2244-4e70-b1f5-5393042af1e4&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;a0c69a99-21c8-4671-8703-7934162fcf1d&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;f42ee2d3-909f-4907-8871-4c22fc0bf756&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;]</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;0ddd015d-b06c-45d5-8c4c-f59713854639&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;35286a68-3c57-41a1-bbb1-0eae73d76c95&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;7d83ee9b-2244-4e70-b1f5-5393042af1e4&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;a0c69a99-21c8-4671-8703-7934162fcf1d&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;f42ee2d3-909f-4907-8871-4c22fc0bf756&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Explorer\FolderDescriptions\&#123;B4BFCC3A-DB2C-424C-B029-7FE99A87C641&#125;\PropertyBag]</span><br><span class="line">&quot;ThisPCPolicy&quot;=&quot;Show&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace\&#123;0DB7E03F-FC29-4DC6-9020-FF41B59E513A&#125;]</span><br></pre></td></tr></table></figure>
<h3 id="去除快速访问">去除快速访问</h3>
<p>在注册表<code>HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer</code>中新建<code>DWORD</code>，命名为<code>HubMode</code>，更改键值为1即可，想要恢复改成0即可</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-25_00-19-06.png" /></p>
<h3 id="去除外接硬盘重复显示">去除外接硬盘重复显示</h3>
<p>去除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders\&#123;F5FB2C77-0E2F-4A16-A381-3E560C68BC83&#125;]</span><br><span class="line"></span><br><span class="line">[-HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders\&#123;F5FB2C77-0E2F-4A16-A381-3E560C68BC83&#125;]</span><br></pre></td></tr></table></figure>
<p>恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders\&#123;F5FB2C77-0E2F-4A16-A381-3E560C68BC83&#125;]</span><br><span class="line">@=&quot;Removable Drives&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace\DelegateFolders\&#123;F5FB2C77-0E2F-4A16-A381-3E560C68BC83&#125;]</span><br><span class="line">@=&quot;Removable Drives&quot;</span><br></pre></td></tr></table></figure>
<h3 id="去除onedrive">去除OneDrive</h3>
<p>去除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT\CLSID\&#123;018D5C66-4533-4307-9B53-224DE2ED1FE6&#125;]</span><br><span class="line">@=&quot;OneDrive&quot;</span><br><span class="line">&quot;System.IsPinnedToNameSpaceTree&quot;=dword:00000000</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Wow6432Node\CLSID\&#123;018D5C66-4533-4307-9B53-224DE2ED1FE6&#125;]</span><br><span class="line">@=&quot;OneDrive&quot;</span><br><span class="line">&quot;System.IsPinnedToNameSpaceTree&quot;=dword:00000000</span><br></pre></td></tr></table></figure>
<p>恢复</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[HKEY_CLASSES_ROOT\CLSID\&#123;018D5C66-4533-4307-9B53-224DE2ED1FE6&#125;]</span><br><span class="line">@=&quot;OneDrive&quot;</span><br><span class="line">&quot;System.IsPinnedToNameSpaceTree&quot;=dword:00000001</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Wow6432Node\CLSID\&#123;018D5C66-4533-4307-9B53-224DE2ED1FE6&#125;]</span><br><span class="line">@=&quot;OneDrive&quot;</span><br><span class="line">&quot;System.IsPinnedToNameSpaceTree&quot;=dword:00000001</span><br></pre></td></tr></table></figure>
<h3 id="最终效果">最终效果</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-08-25_00-28-12.png" /></p>
<p>因为平时我需要用到OneDrive，所以没有去除。可以看到整个资源管理器清爽了很多。</p>
]]></content>
      <categories>
        <category>Software</category>
        <category>Issues</category>
      </categories>
      <tags>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>13 Iterators &amp; Generators</title>
    <url>/2021/08/31/13-Iterators-Generators/</url>
    <content><![CDATA[<h2 id="iterators">Iterators</h2>
<h3 id="definitions">Definitions</h3>
<h4 id="lazy-evaluation">Lazy evaluation</h4>
<p>Delays evaluation of an expression until its value is needed.</p>
<h4 id="iterable">Iterable</h4>
<p>An object capable of returning its members one at a time. Examples include all sequences (lists, strings, tuples) and some non-sequence types (dictionaries).</p>
<h4 id="iterator">Iterator</h4>
<p>An object that provides sequential access to values, one by one.</p>
<ul>
<li>All iterators are iterable. Not all iterable are iterators</li>
</ul>
<span id="more"></span>
<h3 id="how-to-create-iterators">How to create iterators?</h3>
<p><code>iter(iterable)</code>: Return an iterator over the elements of an iterable value.</p>
<ul>
<li>This method creates a bookmark from a book starting at the front.</li>
</ul>
<p><code>next(iterator)</code>: Return the next element in an iterator.</p>
<ul>
<li>Returns the current page and moves the bookmark to the next page.</li>
<li>The iterator remembers where you left off. If the current page is the end of the book, error.</li>
</ul>
<p>When you change the iterable mutably, the corresponding <code>next(iterator)</code> will return changed value.</p>
<h2 id="exceptions-errors">Exceptions / Errors</h2>
<p>Sometimes, computer programs behave in non-standard ways</p>
<ul>
<li>A function receives a argument value of an improper type</li>
<li>Some resources (such as a file) is not available</li>
<li>A network connection is lost in the middle of data transmission</li>
</ul>
<h3 id="raise-exceptions">Raise Exceptions</h3>
<p><code>raise &lt;expression&gt;</code></p>
<p><code>&lt;expression&gt;</code> must be an Exception, which is created like so:</p>
<ul>
<li><p><code>TypeError</code> -- A function was passed the wrong number/type of argument</p></li>
<li><p><code>NameError</code> -- A name wasn’t found</p></li>
<li><p><code>KeyError</code> -- A key wasn’t found in a dictionary</p></li>
<li><p><code>RuntimeError</code> -- Catch-all for troubles during interpretation</p></li>
</ul>
<h3 id="try-statements">Try Statements</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Try:</span><br><span class="line">    &lt;try suite&gt;</span><br><span class="line">except &lt;exception class&gt; as &lt;name&gt;:</span><br><span class="line">    &lt;except suite&gt;</span><br></pre></td></tr></table></figure>
<h4 id="execution-rule">Execution Rule</h4>
<ol type="1">
<li>The<code>&lt;try suite&gt;</code>is executed first</li>
<li>If, during the course of executing the <code>&lt;try suite&gt;</code>, an exception is raised that is not handled otherwise</li>
<li>then the <code>&lt;except suite&gt;</code> is executed with <code>&lt;name&gt;</code> bound to the exception</li>
</ol>
<h3 id="the-for-statement">The For Statement</h3>
<ol type="1">
<li>Evaluate the header <expression>, which must evaluate to an iterable object.</li>
<li>For each element in that sequence, in order:</li>
<li>Bind <name> to that element in the first frame of the current environment</li>
<li>Execute the <suite></li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counts = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> counts:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"><span class="comment"># the for statement is equal to</span></span><br><span class="line">items = <span class="built_in">iter</span>(counts)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        item = <span class="built_in">next</span>(items)</span><br><span class="line">        <span class="built_in">print</span>(item)</span><br><span class="line"><span class="keyword">except</span> StopIteration:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<h2 id="generators">Generators</h2>
<h3 id="definitions-and-rules">Definitions and Rules</h3>
<p>Some definitions:</p>
<ul>
<li>Generator: An iterator created automatically by calling a generator function.</li>
<li>Generator function: A function that contains the keyword yield anywhere in the body.</li>
</ul>
<p>When a generator function is called, it returns a generator <strong>instead of</strong> going into the body of the function. The only way to go into the body of a generator function is by calling <strong>next</strong> on the returned generator.</p>
<p>Yielding values are the same as returning values except yield remembers where it left off.</p>
<h3 id="generators-and-generator-functions">Generators and Generator Functions</h3>
<p>We are allowed to call next on generators because <strong>generators are a type of iterator.</strong></p>
<p>Calling next on a generator goes into the function and evaluates to the <strong>first yield statement</strong>. The next time we call next on that generator, it <strong>resumes</strong> where it left off (just like calling next on any iterator!)</p>
<p>Once the generator hits a return statement, it raises a <code>StopIteration</code></p>
<h3 id="generators-to-represent-infinity-sequences">Generators to Represent Infinity Sequences</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">naturals</span>():</span></span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> x</span><br><span class="line">        x += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="generators-can-yield-from-iterators">Generators can Yield From Iterators</h3>
<p>A <code>yield from</code> statement yields all values from an iterable.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">countdown</span>(<span class="params">k</span>):</span></span><br><span class="line">	<span class="keyword">if</span> k == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">yield</span> <span class="string">&#x27;Blast off&#x27;</span></span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line">		<span class="keyword">yield</span> k</span><br><span class="line">		<span class="keyword">yield</span> <span class="keyword">from</span> countdown(k-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>15 Objects</title>
    <url>/2021/09/07/15-Objects/</url>
    <content><![CDATA[<h2 id="classes">Classes</h2>
<ul>
<li><p>Every object is an <strong>instance</strong> of a <strong>class</strong></p></li>
<li><p>A class is a <strong>type</strong> or category of objects</p></li>
<li><p>A class serves as a blueprint for its instances</p></li>
</ul>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-09-03_23-40-56.png" /></p>
<span id="more"></span>
<h3 id="the-class-statement">The Class Statement</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;<span class="title">name</span>&gt;:</span></span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure>
<p>Assignment &amp; def statements in the Class Statement create class attributes.</p>
<p>When a class is called:</p>
<ol type="1">
<li>A new instance of that class is created.</li>
<li>The <code>init</code> method of a class is called with the new object as its first argument (named self), along with additional arguments provided in the call expression.</li>
</ol>
<h3 id="dot-expressions">Dot Expressions</h3>
<p>You can access class or instance attributes with dot notation.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;expression&gt;.&lt;name&gt;</span><br></pre></td></tr></table></figure>
<p>The<code>&lt;expression&gt;</code>can be any valid Python expression that evaluates to a <strong>class</strong> or <strong>instance</strong>. The <code>&lt;name&gt;</code>must be an <strong>attribute</strong> or a <strong>method</strong>.</p>
<h4 id="evaluation-of-dot-expressions">Evaluation of Dot Expressions</h4>
<ol type="1">
<li>Evaluate the <code>&lt;expression&gt;</code> to the left of the dot, which yields the object of the dot expression.</li>
<li><code>&lt;method_name&gt;</code> is matched against the instance attributes of that object; if an attribute with that name exists, its value is returned.</li>
<li>If not, <code>&lt;method_name&gt;</code> is looked up in the class, which yields a class attribute value.</li>
<li>That value is returned unless it is a function, in which case a bound method is returned instead.</li>
</ol>
<h4 id="assigning-attributes">Assigning Attributes</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;expression&gt;.&lt;name&gt; = &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p><strong>If the expression evaluates to an instance</strong>: then assignment sets an instance attribute, <strong>even if it exists in the class</strong>.</p>
<p><strong>If the expression evaluates to a class</strong>: then assignment sets a class attribute.</p>
<h3 id="object-identity">Object Identity</h3>
<p>Every object that is an instance of a user-defined class has a unique identity</p>
<p>Binding an object to a new name using assignment <strong>does not create a new object</strong></p>
<h3 id="methods-and-functions">Methods and Functions</h3>
<p><strong>Methods</strong> are functions defined in the suite of a class statement.</p>
<p>However methods that are accessed through an instance will be bound methods. <strong>Bound methods</strong> couple together a function and the object on which that method will be invoked. This means that when we invoke bound methods, the instance is automatically passed in as the first argument.</p>
<h3 id="invoking-methods">Invoking Methods</h3>
<p>We can call class methods in two ways: as a bound method and as a function.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Invoking class methods as a bound method:</span></span><br><span class="line"><span class="comment"># Bound methods are accessed through the instance </span></span><br><span class="line"><span class="comment"># and implicitly pass the instance object in as the first argument of the method.</span></span><br><span class="line">&lt;instance&gt;.&lt;method_name&gt;(&lt;arguments&gt;)</span><br><span class="line"><span class="comment"># Invoking class methods as functions:</span></span><br><span class="line"><span class="comment"># We can use the class name to directly call a method. </span></span><br><span class="line"><span class="comment"># These follow our typical function call rules and nothing is implicitly passed in.</span></span><br><span class="line">&lt;class_name&gt;.&lt;method_name&gt;(&lt;instance&gt;, &lt;arguments&gt;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>16 Inheritance</title>
    <url>/2021/10/03/16-Inheritance/</url>
    <content><![CDATA[<h2 id="inheritance">Inheritance</h2>
<h3 id="relationship-of-classes">Relationship of Classes</h3>
<p>Some classes is subclass of others, they have some attributes and methods of their parent, but also have some different or new attributes and methods.</p>
<h3 id="using-inheritance">Using Inheritance</h3>
<p>We can implement specialized classes using inheritance!</p>
<p>The class definition allows us to specify that a new class inherits from a superclass:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> &lt;<span class="title">Class</span> <span class="title">Name</span>&gt;(<span class="params">&lt;Superclass Name&gt;</span>):</span></span><br><span class="line">    &lt;suite&gt;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>We call the more specialized class a <strong>subclass</strong> of the general class and the general class a <strong>superclass</strong> of the specialized class.</p>
<p>The subclass <strong>inherits</strong> <em>all</em> class attributes of the superclass.</p>
<p>The subclass can <strong>override</strong> attributes to specify how it is different from the superclass.</p>
<h3 id="new-dot-expression-rules">New Dot Expression Rules</h3>
<ol type="1">
<li>Evaluate <code>&lt;expression&gt;</code>, which yields an object.</li>
<li><code>&lt;name&gt;</code> is matched against the instance attributes of that object; if an attribute with that name exists, its value is returned.</li>
<li>If not, the name is looked up in the class, which yields a class attribute value. <strong>If it is not found in the class, look in any superclasses</strong>.</li>
<li>That value is returned unless it is a function, in which case a bound method is returned instead.</li>
</ol>
<h3 id="designing-for-inheritance">Designing for Inheritance</h3>
<p>Don't repeat yourself</p>
<p>use existing implementations</p>
<p>Attributes that have been overridden are still accessible via class objects</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>17 Linked Lists &amp; Trees</title>
    <url>/2021/10/03/17-Linked-Lists-Trees/</url>
    <content><![CDATA[<h2 id="linked-list">Linked List</h2>
<h3 id="definition">Definition</h3>
<p>A linked list is either:</p>
<ul>
<li>empty</li>
<li>Composed of a first element and the rest of the linked list</li>
</ul>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-09-20_14-52-22.png" /></p>
<span id="more"></span>
<h3 id="creating-linked-list">Creating Linked List</h3>
<p>We’ll define a linked list recursively by making a constructor that takes in a first and rest value</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Link(<span class="number">1</span> , rest)</span><br><span class="line">Link(<span class="number">1</span> , Link(<span class="number">2</span>, rest))</span><br><span class="line">Link(<span class="number">1</span> , Link(<span class="number">2</span>, Link(<span class="number">3</span>, empty)))</span><br></pre></td></tr></table></figure>
<h3 id="link-class">Link Class</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Link</span>:</span></span><br><span class="line">    empty = ()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, rest=empty</span>):</span></span><br><span class="line">        <span class="keyword">assert</span> rest <span class="keyword">is</span> Link.empty <span class="keyword">or</span> <span class="built_in">isinstance</span>(rest, Link)</span><br><span class="line">        self.first = first</span><br><span class="line">        self.rest = rest</span><br></pre></td></tr></table></figure>
<h2 id="processing-linked-lists">Processing Linked Lists</h2>
<h3 id="sum">Sum</h3>
<p>Goal: Given a linked list , return the sum of all elements in the linked list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_link</span>(<span class="params">lnk</span>):</span></span><br><span class="line">    <span class="comment"># if lnk.rest is Link.empty:</span></span><br><span class="line">    <span class="comment">#    return lnk.first</span></span><br><span class="line">    <span class="comment"># if lnk is Link.empty, it will rasie an error</span></span><br><span class="line">    <span class="keyword">if</span> lnk <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> lnk.first + sum_link(lnk.rest)</span><br></pre></td></tr></table></figure>
<h3 id="display">Display</h3>
<p>Goal: Given a linked list, return a string representing the elements in the linked list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">display_link</span>(<span class="params">lnk</span>):</span></span><br><span class="line">    string = <span class="string">&quot;&lt; &quot;</span></span><br><span class="line">    <span class="keyword">while</span> lnk <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        string += <span class="built_in">str</span>(lnk.first) + <span class="string">&quot; &quot;</span></span><br><span class="line">        lnk = lnk.rest</span><br><span class="line">    <span class="keyword">return</span> sting + <span class="string">&quot;&gt;&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="map">Map</h3>
<p>Goal: Given a linked list, and a one argument function, f, return a new linked list obtained from applying f to each element of list</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_link</span>(<span class="params">lnk, func</span>):</span></span><br><span class="line">    <span class="keyword">if</span> lnk <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">return</span> Link.empty</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(func(lnk.first), map_lnk(lnk.rest, func))</span><br></pre></td></tr></table></figure>
<h2 id="mutating-linked-lists">Mutating Linked Lists</h2>
<h3 id="map-v2">Map v2</h3>
<p>Goal: Given a linked list,and a one argument function, f, mutate the linked list by applying f to each element.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_link</span>(<span class="params">lnk, func</span>):</span></span><br><span class="line">    <span class="keyword">while</span> lnk <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        lnk.first = func(lnk.first)</span><br><span class="line">        lnk = lnk.rest</span><br></pre></td></tr></table></figure>
<h2 id="tree-class">Tree Class</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tree</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, label, branches=[]</span>):</span></span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> branches:</span><br><span class="line">            <span class="keyword">assert</span> <span class="built_in">isinstance</span>(b, Tree)</span><br><span class="line">            self.label = label</span><br><span class="line">            self.branches = branches</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_leaf</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.branches</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>18 Interface</title>
    <url>/2021/10/03/18-Interface/</url>
    <content><![CDATA[<p>Describe how you can interact with an object without necessarily implementing it.</p>
<h2 id="magic-methods">Magic Methods</h2>
<p>These are specially named methods that are callable outside the ordinary dot notation.</p>
<p>example:<code>__init__()</code></p>
<h3 id="str-repr">str &amp; repr</h3>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-10-03_14-56-07.png" /></p>
<p><code>__str__</code> return what would display when <code>print()</code> was called</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-10-03_14-59-14.png" /></p>
<p><code>__repr__</code> return what would display in the interpreter</p>
<span id="more"></span>
<h3 id="link-repr">Link repr</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.rest == Link.empty:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Link(&#x27;</span> + <span class="built_in">repr</span>(self.first) + <span class="string">&#x27;)&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Link(&#x27;</span> + <span class="built_in">repr</span>(self.first) + <span class="string">&#x27;, &#x27;</span> + <span class="built_in">repr</span>(self.rest) + <span class="string">&#x27;)&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="link-str">Link str</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">    s = <span class="string">&#x27;&lt;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> self.rest <span class="keyword">is</span> <span class="keyword">not</span> Link.empty:</span><br><span class="line">        s = s+ <span class="built_in">str</span>(self.first) + <span class="string">&#x27;, &#x27;</span></span><br><span class="line">        self = self.rest</span><br><span class="line">    <span class="keyword">return</span> s + <span class="built_in">str</span>(self.first) + <span class="string">&#x27;&gt;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="link-eq">Link eq</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for == statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__eq__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.first == other.first:</span><br><span class="line">        <span class="keyword">return</span> self.rest == other.rest</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="link-contains">Link contains</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># for in and not in statement</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__contains__</span>(<span class="params">self, x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.first ==x:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> x <span class="keyword">in</span> self.rest</span><br></pre></td></tr></table></figure>
<h3 id="link-add">Link add</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__add__</span>(<span class="params">self, other</span>):</span></span><br><span class="line">    <span class="keyword">if</span> self.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">        <span class="keyword">if</span> other.rest <span class="keyword">is</span> Link.empty:</span><br><span class="line">            <span class="keyword">return</span> Link(self.first, Link(other.first))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> Link(self.first, Link(other.first) + other.rest)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Link(self.first, self.rest + other)</span><br></pre></td></tr></table></figure>
<h3 id="link-mul">Link mul</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__mul__</span>(<span class="params">self, num</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &gt;&gt;&gt; Link(1, Link(2)) * 2</span></span><br><span class="line"><span class="string">    Link(1, Link(2, Link(1, Link(2))))</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    temp = self</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        temp = tmep + self</span><br><span class="line">    <span class="keyword">return</span> temp</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span>(<span class="params">self, num</span>):</span></span><br><span class="line">    <span class="comment"># 2 * Link</span></span><br><span class="line">    <span class="keyword">return</span> self * mul</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>20 More Scheme</title>
    <url>/2022/01/02/20-More-Scheme/</url>
    <content><![CDATA[<h2 id="scheme-list">Scheme List</h2>
<h3 id="scheme-list-definition">Scheme List Definition</h3>
<p>A scheme list is either:</p>
<ul>
<li>nil</li>
<li>composed of a first element (car) and the rest (cdr) of the scheme list</li>
</ul>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2021-11-14_12-41-56.png" /></p>
<span id="more"></span>
<h3 id="creating-scheme-lists">Creating Scheme Lists</h3>
<p><code>(cons 1 (cons 2 (cons 3 nil)))</code></p>
<h3 id="checking-equivalence">Checking Equivalence</h3>
<p><code>(eqial? e1 e2)</code> is like <code>==</code> in Python</p>
<p><code>(eq? e1 e2)</code> is like <code>is</code> in Python (only matters for lists in scheme)</p>
<p><code>(= e1 e2)</code> only works for numbers</p>
<h3 id="list-constructor">List Constructor</h3>
<p>The list constructor takes in any number of elements and puts each elements a single element in a list.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; (<span class="name"><span class="builtin-name">list</span></span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br><span class="line">scm&gt; (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">cons</span></span> <span class="number">3</span> nil)))</span><br><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="quoting">Quoting</h3>
<p>The quote special form takes in a single argument and returns an <strong>unevaluated</strong> version of the argument.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; <span class="symbol">&#x27;a</span></span><br><span class="line">a</span><br><span class="line">scm&gt; (<span class="name"><span class="builtin-name">define</span></span> a &#x27;(<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>))</span><br><span class="line">a</span><br><span class="line">scm&gt; a</span><br><span class="line">(<span class="name">1</span> <span class="number">2</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h3 id="add-to-end">Add To End</h3>
<p>Given a scheme list <code>lst</code> and an element <code>x</code> add <code>x</code> to the end of <code>lst</code></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name">defin</span> (<span class="name">add-to-end</span> lst x)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">null?</span></span> lst)</span><br><span class="line">        (<span class="name"><span class="builtin-name">list</span></span> x)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">null?</span></span> (<span class="name"><span class="builtin-name">cdr</span></span> lst))</span><br><span class="line">            (<span class="name"><span class="builtin-name">cons</span></span> (<span class="name"><span class="builtin-name">car</span></span> lst) (<span class="name">add-to-end</span> (<span class="name"><span class="builtin-name">cdr</span></span> lst) x))</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="tail-recursion">Tail Recursion</h2>
<ul>
<li>An expression in a <strong>tail context</strong> is evaluated as the last step the function call
<ul>
<li>That means nothing is evaluated/applied after it is evaluated</li>
</ul></li>
<li>Function calls in a tail context are called <strong>tail calls</strong></li>
<li>If all recursive calls are in tail contexts, we say that function is <strong>tail recursive</strong>
<ul>
<li>If a language supports tail call optimization, a tail recursive function will only ever open a constant number of frames</li>
</ul></li>
</ul>
<p>Python has no tail call optimization, but scheme support.</p>
<h3 id="identifying-tail-contexts">Identifying Tail Contexts</h3>
<p>An expression is in a tail context only if it is the last thing evaluated in <strong>every possible scenario</strong>.</p>
<h3 id="recursive-frames">Recursive frames</h3>
<p>non-tail recersive Every frame need to be opened to wait for the return value. Because recursive call isn't the last thing to be evaluated, their is still * to be applied.</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">0</span>)</span><br><span class="line">        <span class="number">1</span></span><br><span class="line">        (<span class="name"><span class="builtin-name">*</span></span> n (<span class="name">fact</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>)))</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h4 id="tail-calls">Tail calls</h4>
<p>In this recursive call, the helper function is the last thing to be evaluated. So every frame don't need to open to calculate the return value. It just return what helper function return to it. <figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact</span> n)</span><br><span class="line">    (<span class="name"><span class="builtin-name">define</span></span> (<span class="name">fact-tail</span> n result)</span><br><span class="line">        (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&lt;=</span></span> n <span class="number">1</span>)</span><br><span class="line">            result</span><br><span class="line">            (<span class="name">fact-tail</span> (<span class="name">-n</span> <span class="number">1</span>) (<span class="name"><span class="builtin-name">*</span></span> n result))</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    (<span class="name">fact-tail</span> n <span class="number">1</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure> ### Writing Tail Recursive Functions 1. Identify recursive calls that are not in a tail context. - The last body subexpression in a <code>lambda</code> - the consequent and alternative in a tail context <code>if</code> - All non-predicate sub-expressions in a tail context <code>cond</code> - The last sub-expression in a taill context <code>and</code>, <code>or</code>, <code>begin</code> or <code>let</code> 2. Create a helper function with arguments to accumulate the computation that prevents it from being tail recursive.</p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>19 Scheme</title>
    <url>/2021/11/14/19-Scheme/</url>
    <content><![CDATA[<p>Scheme is a older language that was influential in the creation of python. By learning Scheme, we'll see that many of the ideas learned about one programming language easily transfer to another.</p>
<h3 id="scheme-is-a-dialect-of-lisp">Scheme is a Dialect of Lisp</h3>
<h3 id="scheme-fundamentals">Scheme Fundamentals</h3>
<p>scheme programs consist of expression, which can be:</p>
<ul>
<li>Primitive expression: 2, 3.3, true, +, quotient, ...</li>
<li>Combinations: (quotient 10 2), (not true), ...</li>
</ul>
<p>Numbers are self-evaluating; symbols are bound to values.</p>
<p>Call expressions include an operator and 0 or more operands in parentheses.</p>
<p><strong>In python we put the operator outside the parentheses, and call it function. But in scheme we put it inside the parentheses, and call it procedure.</strong></p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">&gt; (<span class="name"><span class="builtin-name">quotient</span></span> <span class="number">10</span> <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line">&gt; (<span class="name"><span class="builtin-name">quotient</span></span> (<span class="name"><span class="builtin-name">+</span></span> <span class="number">8</span> <span class="number">7</span>) <span class="number">5</span>)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="special-forms">Special Forms</h3>
<p>A combination that is not a call expression is a special form:</p>
<ul>
<li><strong>if</strong> expression: <code>(if &lt;predicate&gt; &lt;consequent&gt; &lt;alternative&gt;)</code></li>
<li><strong>and</strong> and <strong>or</strong>: <code>(and &lt;e1&gt; ... &lt;en&gt;))</code>, <code>(or &lt;e1&gt; ... &lt;en&gt;)</code></li>
<li>Specify many conditions: <code>(cond (&lt;pred1&gt; &lt;expr1&gt;) (&lt;pred2&gt; &lt;expr2&gt;) … (else &lt;else-expr&gt;))</code></li>
<li>Binding symbols: <code>(define &lt;symbol&gt; &lt;expression&gt;)</code></li>
<li>New procedures: <code>(define (&lt;symbol&gt; &lt;formal parameters&gt;) &lt;body&gt;)</code></li>
</ul>
<h3 id="lambda-expression">Lambda Expression</h3>
<p><code>(lambda (&lt;formal-parameters) &lt;body&gt;)</code></p>
<p>Two equivalent expression:</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">plus4</span> x) (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">4</span>))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> plus4 (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">4</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>21 Interpreters</title>
    <url>/2022/01/03/21-Interpreters/</url>
    <content><![CDATA[<h2 id="interpretation">Interpretation</h2>
<h3 id="translation">Translation</h3>
<p>Problem:</p>
<ul>
<li>Computer can only understand one language, binary</li>
<li>Humans can't really write a program using only 0s and 1s</li>
</ul>
<p>Solution:</p>
<ul>
<li>Programming languages like Python, Java, C, etc. are translated to 0s and 1s</li>
</ul>
<p>This translation step comes in a couple forms:</p>
<ul>
<li>Compiled (pre-translated) - translate all at once and run later</li>
<li>Interpreted (translated on-the-fly) - translate while the program is running</li>
</ul>
<h3 id="interpreters">Interpreters</h3>
<p>An <strong>interpreter</strong> does 3 things:</p>
<ol type="1">
<li><strong>Reads</strong> input from user in a specific programming language</li>
<li>Translates input to be computer readable and <strong>evaluates</strong> the result</li>
<li><strong>Prints</strong> the result for the user</li>
</ol>
<p>There are two languages involved:</p>
<ul>
<li><strong>Implemented language:</strong> this is the language the user types in</li>
<li><strong>Implementation language:</strong> this is the language interpreter is implemented in</li>
</ul>
<p>So the <strong>Implemented Language</strong> is translated into the <strong>Implementation Language</strong></p>
<span id="more"></span>
<h2 id="read-eval-print-loop-repl">Read-Eval-Print Loop (REPL)</h2>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2022-01-02_12-59-36.png" /></p>
<h3 id="read">Read</h3>
<h4 id="reading-input">Reading Input</h4>
<p><strong>Lexical Analysis (Lexer):</strong> Turning the input into a collection of <em>tokens</em></p>
<ul>
<li>A token: single input of the input string, e.g. literals, names, keywords, delimiters</li>
</ul>
<p><strong>Syntactic Analysis (Parser):</strong> Turning tokens into a representation of the expression in the implementing language</p>
<ul>
<li>The exact "representation" depends on the type of expression</li>
<li>Types of Scheme Expressions: self-evaluating expressions, symbols, call expressions, special form expressions.</li>
</ul>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2022-01-02_13-21-59.png" /></p>
<h4 id="representing-scheme-primitive-expressions">Representing Scheme Primitive Expressions</h4>
<h5 id="self-evaluating-expressions-booleans-and-numbers">Self-Evaluating expressions (booleans and numbers)</h5>
<p>Use Python booleans and Python numbers</p>
<h5 id="symbols-variable-names">Symbols (variable names)</h5>
<p>Use Python strings</p>
<h4 id="representing-combinations">Representing Combinations</h4>
<p><strong>Combinations</strong> are just Scheme lists containing an operator and operands</p>
<figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">scm&gt; (<span class="name"><span class="builtin-name">define</span></span> expr &#x27;(+ <span class="number">2</span> <span class="number">3</span>))  <span class="comment">; Create the expression (+ 2 3)</span></span><br><span class="line">expr</span><br><span class="line">scm&gt;(<span class="name"><span class="builtin-name">eval</span></span> expr)              <span class="comment">; Evaluate the expression</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line">scm&gt;(<span class="name"><span class="builtin-name">car</span></span> expr)               <span class="comment">; Get the operator</span></span><br><span class="line">+</span><br><span class="line">scm&gt;(<span class="name"><span class="builtin-name">cdr</span></span> expr)               <span class="comment">; Get the operands</span></span><br><span class="line">(<span class="name">2</span> <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr = [<span class="string">&#x27;+&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>]  <span class="comment"># Representation of (+ 2 3)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr[<span class="number">0</span>]             <span class="comment"># Get the operator</span></span><br><span class="line"><span class="string">&#x27;+&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr[<span class="number">1</span>:]            <span class="comment"># Get the operands</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># It works, but isn&#x27;t an exact representation of Scheme lists.</span></span><br></pre></td></tr></table></figure>
<h5 id="python-pairs">Python Pairs</h5>
<p>To accurately represent Scheme combinations as linked lists, let's write a <code>Pair</code> class in Python.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, first, second</span>):</span></span><br><span class="line">        self.first = first</span><br><span class="line">        self.second = second</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Pair(&#123;0&#125;, &#123;1&#125;)&#x27;</span>.<span class="built_in">format</span>(self.first, self.second)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">nil</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nil&#x27;</span></span><br><span class="line">nil = nil()  <span class="comment"># There is only one instance of nil. No other instances can be created</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr = Pair(<span class="string">&#x27;+&#x27;</span>, Pair(<span class="number">2</span>, Pair(<span class="number">3</span>, nil)))  <span class="comment"># Represent (+ 2 3)</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr.first                               <span class="comment"># Get the operator</span></span><br><span class="line"><span class="string">&#x27;+&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>expr.second                              <span class="comment"># Get the operands</span></span><br><span class="line">Pair(<span class="number">2</span>, Pair(<span class="number">3</span>, nil))</span><br></pre></td></tr></table></figure>
<h4 id="reading-combinations">Reading Combinations</h4>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2022-01-02_13-52-12.png" /></p>
<h4 id="special-case-quote">Special Case: quote</h4>
<p>Recall that the quote special form can be invoked in two ways: <code>(quote &lt;expr&gt;)</code> and <code>'&lt;expr&gt;</code></p>
<p>the special <code>'</code> syntax gets converted by the reader into a <code>quote</code> expression, which is a list with 2 elements: <code>Pair('quote', Pair(&lt;expr&gt;, nil))</code></p>
<h3 id="eval">Eval</h3>
<h4 id="evaluating-expression">Evaluating Expression</h4>
<p>Rules for evaluating an expression depends on the expression's type.</p>
<p>Eval takes in one argument besides the expression itself: <strong>the current environment</strong>.</p>
<h4 id="frames-and-environments">Frames and Environments</h4>
<p>When evaluating expressions, the current <strong>environment</strong> consists of the current frame, its parent frame, and all its ancestor frames until the Global Frame.</p>
<h4 id="frames-in-our-interpreter">Frames in our interpreter</h4>
<p>Frames are represented in our interpreter as instance of the <code>Frame</code> class</p>
<p>Each <code>Frame</code> instance has two instance attributes:</p>
<ul>
<li><strong>Bindings:</strong> a dictionary that binds Scheme symbols (Python strings) to Scheme values</li>
<li><strong>Parents:</strong> the parent frame, another <code>Frame</code> instance</li>
</ul>
<p>The evaluator needs to know the current environment, given as a single <code>Frame</code> instance, in order to look up names in expressions.</p>
<h4 id="evaluating-primitive-expressions">Evaluating primitive expressions</h4>
<p>Self-evaluating expression: These expression evaluate to themselves.</p>
<p>Symbols: Just like what Python do for a symbol</p>
<h4 id="evaluating-combinations">Evaluating Combinations</h4>
<p>If the operator is a symbol and is found in the <code>dict</code> of special forms, the combination is a special form. Each special form has special rule for evaluation</p>
<p>Otherwise, the combination is a call expression.</p>
<h4 id="types-of-procedures">Types of Procedures</h4>
<p>A <strong>built-in procedure</strong> is a procedure that predefined in our Scheme interpreter, e.g. <code>+</code>, <code>list</code>, <code>module</code>, etc.</p>
<ul>
<li>Each <strong>built-in procedure</strong> has a corresponding Python function that performs the appropriate operation.</li>
<li>In our interpreter – instance of the <code>BuiltinProcedure</code> class</li>
</ul>
<p>A user-defined procedure is a procedure defined by the user, either with a lambda expression or a define expression.</p>
<ul>
<li>Each user-defined procedure has
<ol type="1">
<li>a list of formal parameters</li>
<li>a body (which is a Scheme list)</li>
<li>a parent frame.</li>
</ol></li>
<li>In our interpreter – instance of the <code>LanbdaProcedure</code> class</li>
</ul>
<h4 id="the-evaluator">The evaluator</h4>
<p>The evaluator consists of two <em>mutually -recursive</em> components:</p>
<p><img src="https://gitee.com/ZHDreamer/markdown-images/raw/master/images/Snipaste_2022-01-02_14-48-23.png" /></p>
]]></content>
      <categories>
        <category>SICP</category>
        <category>CS61-A</category>
      </categories>
      <tags>
        <tag>note</tag>
      </tags>
  </entry>
</search>
